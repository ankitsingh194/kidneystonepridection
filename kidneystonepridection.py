# -*- coding: utf-8 -*-
"""kidneystonepridection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MtHda2vIj6f4vFqC9UyGi8Q9gzQmJBlw
"""

pip install sklearn

pip install panda    numpy

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from zipfile import ZipFile

# loading the temp.zip and creating a zip object
with ZipFile("/content/archive.zip", 'r') as zObject:

    # Extracting all the members of the zip
    # into a specific location.
    zObject.extractall(
        path="/content/kidneystone")

data_df = pd.read_csv('/content/kidneystone/kidney1.csv')

data_df.head()

data_df.tail()

data_df.shape

data_df.info()

data_df.isnull().sum()

data_df.describe()

data_df['target'].value_counts()

"""splitting the feature and target"""

X = data_df.drop(columns='target',axis=1)
Y=data_df['target']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#model training using Logistic Regression(LR)
model= LogisticRegression()

#training the LR model with Training data
model.fit(X_train,Y_train)

#accurracy on training data
X_train_pre=model.predict(X_train)
training_data_accy = accuracy_score(X_train_pre,Y_train)

print('Accuracy on Training data:', training_data_accy)

X_test_pre=model.predict(X_test)
test_data_accy = accuracy_score(X_test_pre,Y_test)

print('Accuracy on Training data:', test_data_accy)

#building predicting system
input_data = (1.024,5.77,698,19.5,354,13)

#change the input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping the numpy array

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)